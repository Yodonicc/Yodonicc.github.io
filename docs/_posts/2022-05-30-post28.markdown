---
layout: post
title: "了解JavaScript弱引用与垃圾回收"
date: 2022-05-30 06:02:20 -0000
categories: frontend gc
---
<!-- <image id="img" src="/public/post13image1.png" style="max-width: 730px;" >
</image> -->

<!-- <video controls="controls" style="max-width: 730px;" type="video/mp4">
   <source id="mp4" src="/public/post8video1.mp4" controls="controls" style="max-width: 730px;" type="video/mp4">
</video> -->
> 作者：[Frank Joseph](https://www.smashingmagazine.com/author/frank-joseph/)
>
> 原文链接：[Understanding Weak Reference In JavaScript](https://www.smashingmagazine.com/2022/05/understanding-weak-reference-javascript/)
>
> 译者：[Yodonicc](https://github.com/Yodonicc)
>
> 在这篇文章中，Frank Joseph解释了JavaScript中的弱引用和强引用，以及可达性的概念。让我们深入了解一下!

内存和性能管理是软件开发的重要方面，也是每个软件开发者都应该注意的。尽管很有用，但弱引用在JavaScript中并不经常使用。WeakSet和WeakMap是在ES6版本中被引入JavaScript的。

### 弱引用

澄清一下，与强引用不同，弱引用不会阻止被引用的对象被垃圾回收器回收，即使它是内存中对该对象的唯一引用。

在进入强引用、`WeakSet`、`Set`、`WeakMap`和`Map`介绍之前，让我们用下面的片段来说明弱引用。

``````javascript
// 创建一个WeakMap对象的实例。
let human = new WeakMap():

// 创建一个对象，并把它赋给一个叫做man的变量。
let man = { name: "Joe Doe" };

// 对human调用set方法，并向其传递两个参数（key和value）。
human.set(man, "done")

console.log(human)
``````

上面代码的输出将是以下内容。

``````javascript
WeakMap {{…} => 'done'}

man = null;
console.log(human)
``````

`man`参数现在被设置为`WeakMap`对象。在我们将`man`变量重新赋值为`null`的时候，内存中对原始对象的唯一引用是弱引用，它来自我们之前创建的`WeakMap`。当JavaScript引擎运行一个垃圾回收过程时，`man`对象将从内存和我们分配给它的`WeakMap`中删除。这是因为它是一个弱引用，并不能阻止垃圾回收。

看起来我们正在取得进展。让我们来谈谈强引用，然后我们将把一切联系起来。



### 强引用

JavaScript中的强引用是一种防止对象被垃圾回收的引用。它将对象保留在内存中。

下面的代码片断说明了强引用的概念。

``````javascript
let man = {name: "Joe Doe"};

let human = [man];

man =  null;
console.log(human);
``````

上面的代码的结果将是这样的。

``````javascript
// 一个长度为1的对象数组。
[{...}]
``````

由于人的数组和对象之间存在强引用，所以不能再通过`man`的变量来访问该对象。该对象被保留在内存中，可以通过以下代码进行访问。

``````javascript
console.log(human[0])
``````

这里需要注意的是，弱引用并不能阻止一个对象被垃圾回收，而强引用可以阻止一个对象被垃圾回收。






注：**特别感谢技术指导dazhao(赵达)对本文翻译的审阅指正**。

